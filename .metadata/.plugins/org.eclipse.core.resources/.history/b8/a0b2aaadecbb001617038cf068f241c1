package fracCalc;

import java.util.*;
public class FracCalc{
	public static void main(String[] args){
		Scanner userInput = new Scanner(System.in); 
		String input;
		do{
			System.out.print("Please enter your expression or type quit: ");
			System.out.println();
			input = userInput.nextLine();
			if (!(input.equals("quit"))){
				System.out.println(produceAnswer(input)); 
			}
		}while(!(input.equals("quit")));
	}
	public static String produceAnswer(String input){
		String expression = input; 
		String[] result = expression.split(" ");
		String[] operands = parseOperands(result);
		int[] operandValues = new int[6];
		for (int i = 0; i < 6; i++){
			operandValues[i] = Integer.parseInt(operands[i]);
		}
		operandValues = toImproperFrac(operandValues);
		if (result[1].equals("+")){
			operandValues = addition(operandValues);
		}
		if (result[1].equals("-")){
			operandValues = subtraction(operandValues);
		}
		if (result[1].equals("*")){
			operandValues = multiplication(operandValues);
		}
		if (result[1].equals("/")){
			operandValues = division(operandValues);
		}
		operandValues = toMixedNum(operandValues);
		operandValues = reduce(operandValues);
		
		if (operandValues[1] == 0){
			return operandValues[0] + "";
		}
		else if (operandValues[0] == 0){
			if (operandValues[1] < 0 && operandValues[2] < 0){
				return (absValue(operandValues[1]) + "/" + absValue(operandValues[2]));
			}
			else if (operandValues[2] < 0){
				return (-operandValues[1] + "/" + absValue(operandValues[2]));
			}
			else{
				return (operandValues[1] + "/" + operandValues[2]);
			}
		}
		else{
			return (operandValues[0] + "_" + absValue(operandValues[1]) + "/" + absValue(operandValues[2]));
		}
	}
	public static String[] parseOperands(String[] result){
		String[] operands = new String[6];
		if (result[0].indexOf("_") > 0){
			String[] mixedNum = result[0].split("_");
			operands[0] = mixedNum[0];
			String[] fraction = mixedNum[1].split("/");
			operands[1] = fraction[0];
			operands[2] = fraction[1];
		}
		else if (result[0].indexOf("/") > 0){
			String[] fraction = result[0].split("/");
			operands[0] = "0";
			operands[1] = fraction[0];
			operands[2] = fraction[1];
		}
		else{
			operands[0] = result[0];
			operands[1] = "0";
			operands[2] = "1";
		}
		if (result[2].indexOf("_") > 0){
			String[] mixedNum = result[2].split("_");
			operands[3] = mixedNum[0];
			String[] fraction = mixedNum[1].split("/");
			operands[4] = fraction[0];
			operands[5] = fraction[1];
		}
		else if (result[2].indexOf("/") > 0){
			String[] fraction = result[2].split("/");
			operands[3] = "0";
			operands[4] = fraction[0];
			operands[5] = fraction[1];
		}
		else{
			operands[3] = result[2];
			operands[4] = "0";
			operands[5] = "1";
		}
		return operands;
	}
	public static int[] toImproperFrac(int[] operandValues){ //converts a mixed number to improper fraction
		int addNumer1 = operandValues[0] * operandValues[2];
		if (addNumer1 < 0){
			operandValues[1] = addNumer1 - operandValues[1];
		}
		else{
			operandValues[1] = addNumer1 + operandValues[1];
		}
		int addNumer2 = operandValues[3] * operandValues[5];
		if (addNumer2 < 0){
			operandValues[4] = addNumer2 - operandValues[4];
		}
		else{
			operandValues[4] = addNumer2 + operandValues[4];
		}
		operandValues[0] = 0;
		operandValues[3] = 0;
		return operandValues;	
	}
	public static int[] addition(int[] operandValues){
		operandValues[1] = operandValues[1] * operandValues[5];
		operandValues[4] = operandValues[4] * operandValues[2];
		int firstDenom = operandValues[2];
		operandValues[2] = operandValues[2] * operandValues[5];
		operandValues[5] = operandValues[5] * firstDenom;
		operandValues[1] = operandValues[1] + operandValues[4];
		return operandValues;
	}
	public static int[] subtraction(int[] operandValues){
		operandValues[1] = operandValues[1] * operandValues[5];
		operandValues[4] = operandValues[4] * operandValues[2];
		int firstDenom = operandValues[2];
		operandValues[2] = operandValues[2] * operandValues[5];
		operandValues[5] = operandValues[5] * firstDenom;
		operandValues[1] = operandValues[1] - operandValues[4];
		return operandValues;
	}
	public static int[] multiplication(int[] operandValues){
		operandValues[1] = operandValues[1] * operandValues[4];
		operandValues[2] = operandValues[2] * operandValues[5];
		return operandValues;
	}
	public static int[] division(int[] operandValues){
		operandValues[1] = operandValues[1] * operandValues[5];
		operandValues[2] = operandValues[2] * operandValues[4];
		return operandValues;
	}
	public static int[] toMixedNum(int[] operandValues){ //converts improper fraction to mixed number
		operandValues[0] = operandValues[1] / operandValues[2];							
		operandValues[1] = operandValues[1] % operandValues[2];
		operandValues[2] = operandValues[2];
		return operandValues;	
	}
	public static int[] reduce(int[] operandValues){
		int gcf = gcf(operandValues[1], operandValues[2]);
		operandValues[1] = operandValues[1] / gcf;
		operandValues[2] = operandValues[2] / gcf;
		return operandValues;
	}
	public static int gcf(int x, int y){														//finds the greatest common factor
		int gfactor = 1;
		for (int i = 1; i <= absValue(x) && i <= absValue(y); i++){			//finds common factors of x and y in ascending order
			if (isDivisibleBy(x, i) && isDivisibleBy(y, i)){
				gfactor = i;																	//the last common factor is the greatest common factor
			}
		}
		return gfactor;
	}
	public static boolean isDivisibleBy(int x, int y){			//checks whether x is divisible by y
		if (y == 0){											//does not allow numbers to be divided by 0
			throw new IllegalArgumentException("Numbers cannot be divided by 0. Please choose another number to be the divisor.");
		}
		if (x % y == 0){
			return true;
		}
		else{
			return false;
		}
	}
	public static int absValue(int x){			
		int answer;
		if (x >= 0){
			answer =  x;
		}
		else{
			answer = (x - (2 * x));						
		}
		return answer;
	}
}
